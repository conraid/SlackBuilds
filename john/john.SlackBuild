#!/bin/bash
# Slackware build script for John the Ripper (http://www.openwall.com/john/)
#
# Copyright 2008-2025 Corrado Franco (https://corradofranco.it)
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version, with the following exception:
# the text of the GPL license may be omitted.

# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose. Compiling,
# interpreting, executing or merely reading the text of the program
# may result in lapses of consciousness and/or very being, up to and
# including the end of all existence and the Universe as we know it.
# See the GNU General Public License for more details.

# You may have received a copy of the GNU General Public License along
# with this program (most likely, a file named COPYING).  If not, see
# <http://www.gnu.org/licenses/>.

set -euo pipefail

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=john
PKGNAM=john
SRCVERSION=1.9.0-jumbo-1
VERSION="${SRCVERSION//-/_}"
BUILD=${BUILD:-12}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ -z ${ARCH:=""} ]; then
  case "$( uname -m )" in
    i?86) ARCH=i686 ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME:-""}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-${BUILD}${TAG}.txz"
  exit 0
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=pentium4 -mtune=generic"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -march=x86-64 -mtune=generic -fPIC -pipe -fomit-frame-pointer"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$SRCVERSION
tar xvf $CWD/$PRGNAM-$SRCVERSION.tar.xz
cd $PRGNAM-$SRCVERSION

chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Apply patches
if [ -e $CWD/patches ]; then
  if [ -e $CWD/patches/series ]; then
    for PATCH in $(cat $CWD/patches/series); do
      patch -p1 -i $CWD/patches/$PATCH
    done
  else
    for PATCH in $CWD/patches/*.patch; do
      patch -p1 -i $PATCH
    done
  fi
fi

export PKG_CONFIG_PATH=/usr/lib${LIBDIRSUFFIX}/openssl-1.0/pkgconfig

SLKCFLAGS="-DJOHN_SYSTEMWIDE=1 -Wall -O2 -fomit-frame-pointer"
SLKCONF="--prefix=/usr --with-systemwide --disable-native-tests --enable-mpi --enable-openmp --enable-opencl --enable-pkg-config --enable-pcap"
cd src

autoreconf -fiv

if [[ "$ARCH" == "x86_64" ]]; then
  LIBDIRSUFFIX="64"
  if grep -q '^flags.* avx' /proc/cpuinfo; then
    ./configure "$SLKCONF" CFLAGS="$SLKCFLAGS -fPIC -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-avx
  fi

  if grep -q "^flags.* xop" /proc/cpuinfo; then
    ./configure "$SLKCONF" CFLAGS="$SLKCFLAGS -fPIC -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-xop
  fi

    ./configure "$SLKCONF" CFLAGS="$SLKCFLAGS -fPIC -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john

    install -Dm755 $CWD/files/john-64.sh $PKG/usr/bin/john
elif [[ "$ARCH" == "x86" ]]; then
  LIBDIRSUFFIX=""

  if grep -q "^flags.* avx" /proc/cpuinfo; then
    ./configure "$SLKCONF" CFLAGS="$SLKCFLAGS -fPIC -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-avx
  fi

  if grep -q "^flags.* xop" /proc/cpuinfo; then
    ./configure "$SLKCONF" CFLAGS="$SLKCFLAGS -fPIC -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-xop
  fi

  if grep -q "^flags.* sse2" /proc/cpuinfo; then
    ./configure $SLKCONF CFLAGS="$SLKCFLAGS -msse2 -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-sse2
  fi

  if grep -q "^flags.* mmx" /proc/cpuinfo; then
    ./configure $SLKCONF CFLAGS="$SLKCFLAGS -mmmx -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john-mmx
  fi

    ./configure $SLKCONF CFLAGS="$SLKCFLAGS -fcommon"
    make clean; make
    install -Dsm755 ../run/john $PKG/usr/libexec/john/john

    install -Dm755 $CWD/files/john.sh $PKG/usr/bin/john
fi
cd -

# Add binaries
for BIN in bitlocker2john calc_stat cprepair dmg2john eapmd5tojohn genmkvpwd hccap2john keepass2john mkvcalcproba putty2john racf2john raw2dyna relbench tgtsnarf uaf2john vncpcap2john wpapcap2john SIPdump; do
  install -Dm755 run/$BIN -t "$PKG/usr/libexec/john"
  ln -sf "/usr/libexec/john/$BIN" "$PKG/usr/bin/$BIN"
done

# Add scripts
install -Dm755 run/{*.py,*.pl,*.rb,*.lua,mailer,benchmark-unify} -t "$PKG/usr/libexec/john"
for ext in py pl rb lua; do
	for script in run/*.$ext; do
		ln -sf "/usr/libexec/john/$(basename "${script}")" "$PKG/usr/bin/$(basename "${script/.${ext}/}")"
	done
done

# Add mailer script
install -Dm755 run/mailer "$PKG/usr/libexec/john/john-mailer"

# Add kernel files
mkdir -p $PKG/usr/share/john/kernels
install -Dm644 run/kernels/* -t "$PKG/usr/share/john/kernels"

# Add config file
install -Dm644 run/john.conf "$PKG/etc/john/john.conf.new"

# Add shared file
install -Dm644 run/*.chr run/*.lst run/dictionary* run/stats run/*.conf -t "$PKG/usr/share/john"
install -Dm644 run/rules/* -t "$PKG/usr/share/john/rules"

# Add shell completion
install -Dm644 run/john.bash_completion "$PKG/usr/share/bash-completion/completions/john"
install -Dm644 run/john.zsh_completion "$PKG/usr/share/zsh/site-functions/_john"

# Make symbolic link
(
cd $PKG/usr/bin
ln -s /usr/bin/john unafs
ln -s /usr/bin/john unique
ln -s /usr/bin/john unshadows
ln -s /usr/libexec/john/john-mailer john-mailer
)

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find $PKG | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -a doc/* $PKG/usr/doc/$PKGNAM-$VERSION
cat $CWD/$PKGNAM.SlackBuild > $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD${TAG}.txz
