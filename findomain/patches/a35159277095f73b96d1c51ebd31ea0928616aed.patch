From a35159277095f73b96d1c51ebd31ea0928616aed Mon Sep 17 00:00:00 2001
From: Eduard Tolosa <tolosaeduard@gmail.com>
Date: Sun, 20 Apr 2025 13:59:58 -0500
Subject: [PATCH] Clippy fixes

---
 src/alerts.rs        |  2 +-
 src/args.rs          |  9 +++----
 src/database.rs      |  2 +-
 src/external_subs.rs |  4 +--
 src/files.rs         | 14 +++++-----
 src/lib.rs           |  2 +-
 src/logic.rs         | 12 ++++-----
 src/networking.rs    | 61 +++++++++++++++++++++-----------------------
 src/utils.rs         |  2 +-
 9 files changed, 51 insertions(+), 57 deletions(-)

diff --git a/src/alerts.rs b/src/alerts.rs
index 5209edc..e7033a0 100644
--- a/src/alerts.rs
+++ b/src/alerts.rs
@@ -99,7 +99,7 @@ pub fn subdomains_alerts(args: &mut Args) -> Result<()> {
 
     if args.with_output && !new_subdomains.is_empty() {
         let filename = args.file_name.replace(
-            args.file_name.split('.').last().unwrap(),
+            args.file_name.split('.').next_back().unwrap(),
             "new_subdomains.txt",
         );
         let file_name = files::return_output_file(args);
diff --git a/src/args.rs b/src/args.rs
index 395c862..459c31c 100644
--- a/src/args.rs
+++ b/src/args.rs
@@ -278,12 +278,9 @@ pub fn get_args() -> Args {
                     .unwrap()
             };
             if !file_name.is_empty() && Path::new(&file_name).exists() {
-                match File::open(&file_name) {
-                    Ok(file) => BufReader::new(file).lines().flatten().collect(),
-                    Err(_) => {
-                        eprintln!("Error reading the user agents file, please make sure that the file format is correct.");
-                        std::process::exit(1)
-                    }
+                if let Ok(file) = File::open(&file_name) { BufReader::new(file).lines().flatten().collect() } else {
+                    eprintln!("Error reading the user agents file, please make sure that the file format is correct.");
+                    std::process::exit(1)
                 }
             } else if !file_name.is_empty() && !Path::new(&file_name).exists() {
                 eprintln!("Error reading the user agents file, please make sure that the path is correct. Leaving");
diff --git a/src/database.rs b/src/database.rs
index 63918cd..868dfb7 100644
--- a/src/database.rs
+++ b/src/database.rs
@@ -97,7 +97,7 @@ pub fn query_findomain_database(args: &mut Args) -> Result<()> {
             "Searching subdomains in the Findomain database for the job name {} 🔍",
             args.jobname
         );
-    };
+    }
 
     let mut connection: postgres::Client = return_database_connection(&args.postgres_connection);
 
diff --git a/src/external_subs.rs b/src/external_subs.rs
index 812e759..e05b783 100644
--- a/src/external_subs.rs
+++ b/src/external_subs.rs
@@ -20,7 +20,7 @@ pub fn get_amass_subdomains(
     let mut subdomains = HashSet::new();
     if !(File::create(output_filename).is_ok()
         && Command::new("amass")
-            .args(&mut vec![
+            .args(vec![
                 "enum",
                 "-passive",
                 "-d",
@@ -60,7 +60,7 @@ pub fn get_subfinder_subdomains(
     let mut subdomains = HashSet::new();
     if !(File::create(output_filename).is_ok()
         && Command::new("subfinder")
-            .args(&mut vec![
+            .args(vec![
                 "-silent",
                 "-all",
                 "-d",
diff --git a/src/files.rs b/src/files.rs
index d1e970c..94e559b 100644
--- a/src/files.rs
+++ b/src/files.rs
@@ -50,10 +50,10 @@ pub fn read_from_file(args: &mut Args) -> Result<()> {
             println!("To use Findomain as resolver, use one or more of the --resolved/-r, --ip/-i, --ipv6-only, --http-status or --pscan/--iport/--lport options.");
             std::process::exit(1)
         } else {
-            args.subdomains = if !args.files.is_empty() {
-                HashSet::from_iter(return_file_targets(args, args.files.clone()))
-            } else {
+            args.subdomains = if args.files.is_empty() {
                 HashSet::from_iter(utils::read_stdin())
+            } else {
+                HashSet::from_iter(return_file_targets(args, args.files.clone()))
             };
             if args.no_resolve {
                 args.subdomains.retain(|target| {
@@ -74,10 +74,10 @@ pub fn read_from_file(args: &mut Args) -> Result<()> {
             logic::manage_subdomains_data(args)?;
         }
     } else {
-        let mut file_targets = if !args.files.is_empty() {
-            return_file_targets(args, args.files.clone())
-        } else {
+        let mut file_targets = if args.files.is_empty() {
             utils::read_stdin()
+        } else {
+            return_file_targets(args, args.files.clone())
         };
 
         file_targets.retain(|target| !target.is_empty() && logic::validate_target(target));
@@ -136,7 +136,7 @@ pub fn return_output_file(args: &Args) -> Option<File> {
 
 pub fn check_output_file_exists(file_name: &str) -> Result<()> {
     if Path::new(&file_name).exists() && Path::new(&file_name).is_file() {
-        let backup_file_name = file_name.replace(file_name.split('.').last().unwrap(), "old.txt");
+        let backup_file_name = file_name.replace(file_name.split('.').next_back().unwrap(), "old.txt");
         fs::rename(file_name, &backup_file_name).with_context(|| {
             format!(
                 "The file {} already exists but Findomain can't backup the file to {}. Please run the tool with a more privileged user or try in a different directory.",
diff --git a/src/lib.rs b/src/lib.rs
index 9194fbe..4776cf7 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -72,7 +72,7 @@ pub fn get_subdomains(args: &mut Args) -> Result<()> {
     if !args.no_discover {
         let discovered_subdomains = networking::search_subdomains(args);
         args.subdomains.extend(discovered_subdomains);
-    };
+    }
 
     if !args.import_subdomains_from.is_empty() {
         let base_target = format!(".{}", args.target);
diff --git a/src/logic.rs b/src/logic.rs
index ca504b7..8b92d21 100644
--- a/src/logic.rs
+++ b/src/logic.rs
@@ -19,7 +19,7 @@ pub fn manage_subdomains_data(args: &mut Args) -> Result<()> {
     let file_name = files::return_output_file(args);
     if !args.quiet_flag {
         println!();
-    };
+    }
 
     if (args.only_resolved || args.with_ip || args.ipv6_only)
         && !args.disable_wildcard_check
@@ -92,7 +92,7 @@ pub fn validate_target(target: &str) -> bool {
         && target.contains('.')
         && parse_domain_name(target).is_ok()
         && !target.contains(&SPECIAL_CHARS[..])
-        && target.chars().all(|c| c.is_ascii())
+        && target.is_ascii()
 }
 
 #[must_use]
@@ -112,7 +112,7 @@ pub fn validate_subdomain(base_target: &str, subdomain: &str, args: &mut Args) -
         && !subdomain.starts_with('.')
         && (subdomain.ends_with(base_target) || subdomain == args.target)
         && !subdomain.contains(&SPECIAL_CHARS[..])
-        && subdomain.chars().all(|c| c.is_ascii())
+        && subdomain.is_ascii()
         && parse_domain_name(subdomain).is_ok()
         && if args.filter_by_string.is_empty() && args.exclude_by_string.is_empty() {
             true
@@ -185,9 +185,9 @@ pub fn print_and_write(
 
 #[must_use]
 pub fn eval_http(http_status: &HttpData) -> String {
-    if !http_status.host_url.is_empty() {
-        http_status.host_url.clone()
-    } else {
+    if http_status.host_url.is_empty() {
         http_status.http_status.clone()
+    } else {
+        http_status.host_url.clone()
     }
 }
diff --git a/src/networking.rs b/src/networking.rs
index 1160d48..b5bd37f 100644
--- a/src/networking.rs
+++ b/src/networking.rs
@@ -208,10 +208,10 @@ pub fn async_resolver_all(args: &Args) -> HashMap<String, ResolvData> {
         println!();
     }
 
-    if !args.subdomains.is_empty() {
-        async_resolver_engine(args, args.subdomains.clone(), &file_name)
-    } else {
+    if args.subdomains.is_empty() {
         HashMap::new()
+    } else {
+        async_resolver_engine(args, args.subdomains.clone(), &file_name)
     }
 }
 
@@ -397,7 +397,7 @@ fn async_resolver_engine(
 
             if args.no_resolve {
                 local_resolv_data.http_data.host_url = host.clone();
-            };
+            }
 
             (host.clone(), local_resolv_data)
         })
@@ -410,40 +410,37 @@ fn async_resolver_engine(
             .unwrap();
         screenshots_pool.install(|| { resolv_data.par_iter().map(|(sub, host_resolv_data)| {
         if !host_resolv_data.http_data.host_url.is_empty() || args.no_resolve {
-            match screenshots::take_screenshot(
+            if matches!(screenshots::take_screenshot(
                 utils::return_headless_browser(args.chrome_sandbox),
                 &host_resolv_data.http_data.host_url,
                 &args.screenshots_path,
                 &args.target,
                 sub,
-            ) {
-                Ok(()) => {
-                    if args.no_resolve {
-                        println!("{}", host_resolv_data.http_data.host_url);
-                    }
+            ), Ok(())) {
+                if args.no_resolve {
+                    println!("{}", host_resolv_data.http_data.host_url);
                 }
-                Err(_) => {
-                    let mut counter = 0;
-                    while counter <= 2 {
-                        match screenshots::take_screenshot(
-                            utils::return_headless_browser(args.chrome_sandbox),
-                            &host_resolv_data.http_data.host_url,
-                            &args.screenshots_path,
-                            &args.target,
-                            sub,
-                        ) {
-                            Ok(()) => {
-                                if args.no_resolve {
-                                    println!("{}", host_resolv_data.http_data.host_url);
-                                };
-                                break;
+            } else {
+                let mut counter = 0;
+                while counter <= 2 {
+                    match screenshots::take_screenshot(
+                        utils::return_headless_browser(args.chrome_sandbox),
+                        &host_resolv_data.http_data.host_url,
+                        &args.screenshots_path,
+                        &args.target,
+                        sub,
+                    ) {
+                        Ok(()) => {
+                            if args.no_resolve {
+                                println!("{}", host_resolv_data.http_data.host_url);
                             }
-                            Err(e) => {
-                                if counter == 3 {
-                                    eprintln!("The subdomain {sub} has an active HTTP server running at {} but the screenshot was not taken. Error description: {e}", host_resolv_data.http_data.host_url);
-                                }
-                                counter += 1;
+                            break;
+                        }
+                        Err(e) => {
+                            if counter == 3 {
+                                eprintln!("The subdomain {sub} has an active HTTP server running at {} but the screenshot was not taken. Error description: {e}", host_resolv_data.http_data.host_url);
                             }
+                            counter += 1;
                         }
                     }
                 }
@@ -512,7 +509,7 @@ fn async_resolver_engine(
                     .collect();
             }
         }
-    };
+    }
 
     for (sub, host_resolv_data) in &resolv_data {
         if ip_http_ports {
@@ -701,7 +698,7 @@ pub fn check_http_response_code(api_name: &str, response: &reqwest::blocking::Re
                 api_name,
                 response.status(),
             );
-        };
+        }
         false
     }
 }
diff --git a/src/utils.rs b/src/utils.rs
index 5416cef..2fcbc14 100644
--- a/src/utils.rs
+++ b/src/utils.rs
@@ -51,7 +51,7 @@ please uninstall it and reinstall without using Snap. Error: {e}");
 }
 
 #[must_use]
-pub fn calculate_timeout(threads: usize, timeout: u64) -> u64 {
+pub const fn calculate_timeout(threads: usize, timeout: u64) -> u64 {
     if timeout <= 500 {
         if threads >= 50 {
             timeout + 200
